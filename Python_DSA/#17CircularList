class _Node:
    __slots__ = '_element', '_next'

    def __init__(self, element, next):
        self._element = element
        self._next = next

class CirculatLinkedList:
    def __init__(self):
        self._head = None
        self._tail = None
        self._size = 0 
    
    def __len__(self):
        return self._size
    
    def isempty(self):
        return self._size == 0
    
    def addlast(self, e):
        newest = _Node(e, None)
        if self.isempty():
            newest._next = newest
            self._head = newest
        else:
            newest._next = self._tail._next
            self._tail._next = newest
        self._tail = newest
        self._size += 1

    #to display circular linked list element
    def display(self):
        p = self._head
        i = 0
        while i<len(self):
            print(p._element, end="-->")
            p = p._next
            i += 1
        print()

    #Insorting element at beginning in Circular List
    def addfirst(self, e):
        newest = _Node(e, None)
        if self.isempty():
            newest._next = newest
            self._head = newest
        else:
            self._tail._next = newest
            newest._next = self._head

        self._head = newest
        self._size += 1

    #Inserting element anywhere in Circular Linked List
    def addany(self, e, position):
        newest = _Node(e, None)
        p = self._head
        i = 1
        while i<position-1:
            p = p._next
            i += 1
        newest._next = p._next   
        p._next = newest 
        self._size += 1

    #Delete Elelment at beginning of Circular List
    def removefirst(self):
        if self.isempty():
            print("Circular List is Empty")
            return
        e = self._head._element
        self._tail._next = self._head._next
        self._head = self._head._next
        self._size -= 1
        if self.isempty():
            self._head = None
            self._tail = None
        return e

    #Delete element at end of Circular List
    def removelast(self):
        if self.isempty():
            print("Circular list is empty")
            return 
        p = self._head
        i = 1
        while i<len(self)-1:
            p = p._next
            i += 1
        self._tail = p
        p = p._next
        self._tail._next = self._head
        e = p._element
        self._size -= 1
        return e

    #Delete element from anywhere from Circular List
    def removeany(self, position):
        p = self._head
        i = 1
        while i<position-1:
            p = p._next
            i += 1
        e = p._next._element
        p._next = p._next._next
        self._size -= 1
        return e
        


C = CirculatLinkedList()
C.addlast(70)
C.addlast(2)
C.addlast(4)
#print("size:", len(C))
C.addlast(45)
C.addlast(3)
C.display()
#C.addfirst(234)
print("size:", len(C))
C.addany(34,4)
C.addany(24,2)
C.display()
print("size:", len(C))
ele = C.removefirst()
C.display()
print("size:", len(C))
print("fisrt Element Removed:", ele)
ele = C.removelast()
C.display()
print("size:", len(C))
print("last Element Removed:", ele)
C.removeany(2)
C.display()
print("size:", len(C))
