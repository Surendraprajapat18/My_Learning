# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        
        slow, fast = head, head 

        while fast and fast.next:
            slow, fast = slow.next, fast.next.next
            if slow is fast:
                return True
        return False

#2 Solution

class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        if not head:
            return False
        start = head
        ht = {}
        while start:
            if not start.next:
                return False
            if start in ht:
                return True
            ht[start] = start.val
            start = start.next
